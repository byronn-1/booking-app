scalar DateTime
@specifiedBy(url: "https://scalars.graphql.org/andimarek/date-time.html")
scalar LocalDateTime

type Student {
    id: ID!
    firstName: String!
    lastName: String!
    phoneNo: String!
    isWaiverSigned: Boolean!
    sessions:[Session]
}
type Coach {
    id: ID!
    first_name: String!
    last_name: String!
    phone_no: String!
    email: String!
    club: ID!
}
type Owner {
    id: ID!
    first_name: String!
    last_name: String!
    phone_no: String!
    email: String!
    club: ID!
}
type Club {
    id: ID!
    club_name: String!
    street_number: String!
    street_name: String!
    address_line2: String!
    city: String!
    state: String!
    postal_code: String!
    country: String!
    owner: ID!
}
type Session {
    id: ID!
    sessionType: String
    location: String
    time: LocalDateTime
    isBooked: Boolean
    isPaidFor:Boolean
    isCompleted: Boolean
    student: Student
}
type SessionTemplate {
    id: ID!
    sessionType: String
    location: String
    dayOfTheWeek: Int
    time: LocalDateTime
    sevenDaySessionTemplateId: ID!
}
type SevenDaySessionTemplate {
    id:ID!
    templateName: String
    coach: String
    sessionTemplates: [SessionTemplate]
}
type Query {
    allClubs: [Club]
    allOwners: [Owner]
    allCoaches: [Coach]
    allSessions: [Session]
    getAllStudents: [Student]
    getAllSessionTemplates: [SessionTemplate]
    getAllSevenDaySessionTemplates:[SevenDaySessionTemplate]
    getSessionsByStudentFirstName(firstName: String!): [Session]
    getSessionsByDay(date: String!): [Session]
    getSessionsByWeek(startOfWeekDate: String!):[Session]
    getTemplatesByCoach(coachId: ID!): [SessionTemplate]
}

####################
###### INPUTS ######
####################
input StudentInput {
    firstName: String!
    lastName: String!
    phoneNo: String!
    isWaiverSigned: Boolean!
}
input CoachInput {
    first_name: String!
    last_name: String!
    phone_no: String!
    email: String!
    club: ID!
}
input OwnerInput {
    first_name: String!
    last_name: String!
    phone_no: String!
    email: String!
    club: ID!
}
input ClubInput {
    club_name: String!
    street_number: String!
    street_name: String!
    address_line2: String!
    city: String!
    state: String!
    postal_code: String!
    country: String!
    owner: ID!
}
input SessionInput {
    sessionType: String
    location: String
    time: LocalDateTime
    isBooked: Boolean!
    isPaidFor: Boolean
    isCompleted: Boolean
    studentId: ID
}
input SessionTemplateInput {
    sessionType: String
    location: String
    dayOfTheWeek: Int
    time: LocalDateTime
}
input SevenDaySessionTemplateInput {
    templateName: String
    coach: String
    sessionTemplates: [SessionTemplateInput]
}
type Mutation {
    createClub(clubInput: ClubInput!): Club
    addOwner(ownerInput: OwnerInput!): Owner
    addCoach(coachInput: CoachInput!): Coach
    addStudent(studentInput: StudentInput!): Student
    createSession(sessionInput: SessionInput!): Session
    createSessionsFromId(templateId: ID!, weekStartDate: LocalDateTime!): [Session]
    createSevenDaySessionsTemplate(sevenDaySessionTemplateInput: SevenDaySessionTemplateInput!, weekStartDate: LocalDateTime): SevenDaySessionTemplate
    createSevenDaySessionTemplateWithoutSessions(input: SevenDaySessionTemplateInput!): SevenDaySessionTemplate
    updateSevenDaySessionTemplate(templateId: ID!, input: SevenDaySessionTemplateInput!): SevenDaySessionTemplate
#    addSessionsToTemplate
#    deleteSessionsFromTemplate
}